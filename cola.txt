BASIC

-Pra começar o HTML, ecrever na tela html:5

-colar sempre isso depois antes de head <link rel="stylesheet" href="style.css">
                                        <script src="script.js" defer></script>
-height: altura
-width: largura

-quando colocar * (css) as alteraçoes vao ser para todas as coisas da pagina
-padding:  é responsável por definir uma distância interna entre um elemento e sua borda

-TODO CSS COLOCAR:
*{
    margin: 0px;
    padding: 0px;
    box-sizing: border-box;
    font-family:   ;
}

Quando usar id e quando usar class?
O id (unico) so pode se repetir uma vez em um arquivo, e a classe nao segue essa regra.

header, nav, main, footer - SAO TAGS

form - tag de formulario (tudo oq é numerico posso definir min e max)
-number: posso definir valor min e max (Aula2Ex- linha 14)
-colocar letrinhas nos campos de formulario: placeholder="Insira o titulo" (Aula2Ex - linha 13)

fildset é usado para agrupar elementos, assim como labels ( <label> ), dentro de um formulário web

label representa uma legenda para um item em uma interface de usuário

metodo (Aula2Ex - linha 11): post- nao aparece os dados
        get - aparece os dados 

_____________________________________________________________________________________________________
AULA 6/3
DIV:
TAMANHO:border + padding + largura

----------------------------------------------------------------------------------------------------
AULA 13/03

para colocar fontes, pesquisar no google fonts, e importar!

https://staratlas.com/

---------------------------------------------------------------------------------------------------

 <script src="script.js" defer></script>

 adicionar e remover tag

 Contêiner e Itens Flexíveis: Em um layout flexbox, os elementos são organizados dentro de um contêiner flexível, que pode ser horizontal (row) ou vertical (column). Esses elementos dentro do contêiner são chamados de itens flexíveis.

Eixo Principal e Eixo Transversal: O eixo principal é a direção primária de layout do contêiner, enquanto o eixo transversal é perpendicular ao eixo principal. Por padrão, o eixo principal é horizontal (row) e o eixo transversal é vertical (column).

Distribuição de Espaço: Flexbox permite distribuir o espaço disponível dentro do contêiner entre os itens flexíveis de maneira flexível e automática, usando propriedades como justify-content e align-items.

Alinhamento: Além de distribuir o espaço, Flexbox também permite alinhar os itens flexíveis ao longo do eixo principal e transversal usando propriedades como justify-content, align-items, align-self, entre outras.

Reorganização Dinâmica: Os itens flexíveis podem ser reorganizados automaticamente dentro do contêiner com base no espaço disponível e nas propriedades de ordem (order) e flexibilidade (flex).

Responsividade: Flexbox é altamente adaptável a diferentes tamanhos de tela e dispositivos, facilitando a criação de layouts responsivos e fluidos.


display: grid;
// Torna o elemento um grid container.
display: inline-grid;
// Torna o elemento um grid container porém com comportamento inline.
display: subgrid;
// Para grids dentro de grids (ainda não é suportado, porém você pode normalmente colocar display: grid; no grid dentro do grid que funciona).

gap: 20px
// Define 20px entre os elementos do grid (linha e coluna).
column-gap: 20px
// Define 20px de distância entre as colunas.
row-gap: 20px
// Define 20px de distância entre as linhas.

justify-content: start
// Justifica os itens ao início.
justify-content: end
// Justifica os itens ao final.
justify-content: stretch
// Estica os itens.
justify-content: space-around
// Distribui espaço entre os elementos. (O início e final são menores que os espaços internos).
justify-content: space-between
// Cria um espaço entre os elementos, ignorando o início e final.
justify-content: space-evenly
// Cria um espaço igual entre as colunas (no início e final também).
justify-content: center
// Centraliza o conteúdo.

align-content: start
// Alinha os itens ao início.
align-content: end
// Alinha os itens ao final.
align-content: stretch
// Estica os itens.
align-content: space-around
// Distribui espaço entre os elementos. (O início e final são menores que os espaços internos).
align-content: space-between
// Cria um espaço entre os elementos, ignorando o início e final.
align-content: space-evenly
// Cria um espaço igual entre as colunas (no início e final também).
align-content: center
// Centraliza o conteúdo.

align-items: start
// Alinha os itens ao início.
align-items: end
// Alinha os itens ao final.
align-items: center
// Centraliza o conteúdo.
align-items: stretch
// Estica os itens.

grid-column: 1
// O item ocupará a coluna 1.
grid-column: 1 / 3
// O item ocupará a coluna 1 e 2 (Sim, isso mesmo, 1 e 2, pois os valores 1 / 3 são referentes as linhas da coluna. Isso significa que começa na linha 1 (início do grid) e vai até a linha 3, que é o começo da terceira coluna).
grid-column-start: 2
// O item vai começar na linha 2.
grid-column-end: 4
// O item vai terminar na linha 4.
grid-column: span 2
// O item irá ocupar duas colunas a partir de onde ele estiver.

Mostra um texto no seu html:

var texto = document.getElementById(“texto”).innerText = “texto quer mudar”
Substitui o “texto” pelo seu id

 Pegar um valor de um input:
var info = document.getElementById(“input”).value

 Um exemplo de como pegar o valor de um input e imprimir o dobro dele é
var info = document.getElementById(“input”).value 
var texto = document.getElementById(“texto”).innerText = toString(info * 2)